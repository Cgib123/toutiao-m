{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\toutiao-m\\src\\views\\home\\components\\article-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\toutiao-m\\src\\views\\home\\components\\article-list.vue","mtime":1614572299557},{"path":"C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\toutiao-m\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["article-list.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"article-list\">\r\n    <van-pull-refresh\r\n      v-model=\"isRefreshLoading\"\r\n      :success-text=\"refreshSuccessText\"\r\n      :success-duration=\"1500\"\r\n      @refresh=\"onRefresh\"\r\n    >\r\n      <van-list\r\n        v-model=\"loading\"\r\n        :finished=\"finished\"\r\n        finished-text=\"没有更多了\"\r\n        :error.sync=\"error\"\r\n        error-text=\"请求失败，点击重新加载\"\r\n        @load=\"onLoad\"\r\n      >\r\n        <!-- 遍历文章列表项 -->\r\n        <article-item\r\n          v-for=\"(article, index) in list\"\r\n          :key=\"index\"\r\n          :article=\"article\"\r\n        />\r\n        <!-- <van-cell\r\n          v-for=\"(article, index) in list\"\r\n          :key=\"index\"\r\n          :title=\"article.title\"\r\n        /> -->\r\n      </van-list>\r\n    </van-pull-refresh>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 加载组件\r\nimport { getArticles } from '@/api/article'\r\nimport ArticleItem from '@/components/article-item'\r\n\r\nexport default {\r\n  // 注册组件\r\n  name: 'ArticleList',\r\n  components: {\r\n    // 注册\r\n    ArticleItem\r\n  },\r\n  props: {\r\n    channel: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      list: [], // list[] 存储列表数据的数组\r\n      loading: false, // 控制加载中 loading状态\r\n      finished: false, // 控制数据加载结束的状态，为true时，不再触发加载更多\r\n      timestamp: null, // 请求获取下一页数据的时间戳\r\n      error: false, // 列表加载失败的提示状态\r\n      isRefreshLoading: false, // 控制下拉刷新的loading状态\r\n      refreshSuccessText: '' // 下拉刷新成果提示文本\r\n    }\r\n  },\r\n  computed: {},\r\n  watch: {},\r\n  created () { },\r\n  mounted () { },\r\n  methods: {\r\n    async onLoad () {\r\n      try {\r\n        // 1.请求获取数据\r\n        const { data } = await getArticles({\r\n          channel_id: this.channel.id, // 频道ID\r\n          // timestamp 请求数据的页码\r\n          // 请求第一页的数据： 当前最新时间戳 Date.now()\r\n          // 用于请求之后数据的时间戳，会在当前请求的结果中返回给你\r\n          timestamp: this.timestamp || Date.now(),\r\n          with_top: 1 // 是否包含置顶，进入页面第一次请求时要包含置顶\r\n        })\r\n        /* // 模拟随即失败的情况\r\n        if(Math.random() > 0.5) {\r\n          JSON.parse('desnajndjsa')\r\n        } */\r\n        // 2.把请求结果数据放到 list 数组中\r\n        const { results } = data.data\r\n        // ...数组的展开操作符，会把数组一个一个展开 拿出来,=list[0],list[1]\r\n        this.list.push(...results)\r\n\r\n        // 3.本次数据加载结束之后，要把加载状态设置为结束\r\n        this.loading = false\r\n        // 4.判断数据是否全部加载完成\r\n        if (results.length) {\r\n          // 更新获取下一页数据的时间戳\r\n          this.timestamp = data.data.pre_timestamp\r\n        } else {\r\n          // 如果没有数据了，将finished=true，不再load加载更多\r\n          this.finished = true\r\n        }\r\n      } catch (err) {\r\n        // 展示错误提示状态\r\n        this.error = true\r\n        // 请求失败 loading也需要关闭\r\n        this.loading = false\r\n      }\r\n    },\r\n    // 当下拉刷新的 时候会触发调用该函数\r\n    async onRefresh () {\r\n      try {\r\n        // 1.请求获取数据\r\n        const { data } = await getArticles({\r\n          channel_id: this.channel.id, // 频道ID\r\n          // timestamp 请求数据的页码\r\n          // 请求当前最新时间戳 Date.now()\r\n          timestamp: Date.now(),\r\n          with_top: 1 // 是否包含置顶，进入页面第一次请求时要包含置顶\r\n        })\r\n        /*     // 模拟随即失败的情况\r\n            if (Math.random() > 0.5) {\r\n              JSON.parse('desnajndjsa')\r\n            } */\r\n        // 2.将数据追加列表的顶部\r\n        const { results } = data.data\r\n        this.list.unshift(...results)\r\n        // 3.关闭下拉刷新的loading状态\r\n        this.isRefreshLoading = false\r\n        // 更新下拉刷新成功提示文本\r\n        this.refreshSuccessText = `刷新成功，更新了${results.length}条数据`\r\n      } catch (err) {\r\n        this.isRefreshLoading = false\r\n        this.refreshSuccessText = '刷新失败'\r\n      }\r\n    }\r\n    /*     onLoad () {\r\n          // 异步更新数据\r\n          // 1.请求获取数据\r\n          // setTimeout 仅做示例，真实场景中一般为 ajax 请求\r\n          setTimeout(() => {\r\n            // 2.把请求结果数据放到 list 数组中\r\n            for (let i = 0; i < 10; i++) {\r\n              this.list.push(this.list.length + 1)\r\n            }\r\n            // 3.本次数据加载结束之后，要把加载状态设置为结束\r\n            // loading 关闭以后才能触发下一次的加载更多\r\n            this.loading = false\r\n            // 4.判断数据是否全部加载完成\r\n            if (this.list.length >= 40) {\r\n              // 如果没有数据了把finished设置为true，之后不再触发加载更多\r\n              this.finished = true\r\n            }\r\n          }, 1000)\r\n        } */\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.article-list {\r\n  // 记住列表的滚动位置\r\n  height: 79vh;\r\n  overflow-y: auto; // 没有的话列表就没办法滚动了\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views/home/components"}]}