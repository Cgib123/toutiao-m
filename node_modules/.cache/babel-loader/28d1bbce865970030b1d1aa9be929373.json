{"remainingRequest":"C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\src\\views\\home\\components\\article-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\src\\views\\home\\components\\article-list.vue","mtime":1614572300000},{"path":"C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Cgib\\Desktop\\vue-project\\toutiao-m\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8g5Yqg6L2957uE5Lu2CmltcG9ydCB7IGdldEFydGljbGVzIH0gZnJvbSAnQC9hcGkvYXJ0aWNsZSc7CmltcG9ydCBBcnRpY2xlSXRlbSBmcm9tICdAL2NvbXBvbmVudHMvYXJ0aWNsZS1pdGVtJzsKZXhwb3J0IGRlZmF1bHQgewogIC8vIOazqOWGjOe7hOS7tgogIG5hbWU6ICdBcnRpY2xlTGlzdCcsCiAgY29tcG9uZW50czogewogICAgLy8g5rOo5YaMCiAgICBBcnRpY2xlSXRlbQogIH0sCiAgcHJvcHM6IHsKICAgIGNoYW5uZWw6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfQogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsaXN0OiBbXSwKICAgICAgLy8gbGlzdFtdIOWtmOWCqOWIl+ihqOaVsOaNrueahOaVsOe7hAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgLy8g5o6n5Yi25Yqg6L295LitIGxvYWRpbmfnirbmgIEKICAgICAgZmluaXNoZWQ6IGZhbHNlLAogICAgICAvLyDmjqfliLbmlbDmja7liqDovb3nu5PmnZ/nmoTnirbmgIHvvIzkuLp0cnVl5pe277yM5LiN5YaN6Kem5Y+R5Yqg6L295pu05aSaCiAgICAgIHRpbWVzdGFtcDogbnVsbCwKICAgICAgLy8g6K+35rGC6I635Y+W5LiL5LiA6aG15pWw5o2u55qE5pe26Ze05oizCiAgICAgIGVycm9yOiBmYWxzZSwKICAgICAgLy8g5YiX6KGo5Yqg6L295aSx6LSl55qE5o+Q56S654q25oCBCiAgICAgIGlzUmVmcmVzaExvYWRpbmc6IGZhbHNlLAogICAgICAvLyDmjqfliLbkuIvmi4nliLfmlrDnmoRsb2FkaW5n54q25oCBCiAgICAgIHJlZnJlc2hTdWNjZXNzVGV4dDogJycgLy8g5LiL5ouJ5Yi35paw5oiQ5p6c5o+Q56S65paH5pysCgogICAgfTsKICB9LAoKICBjb21wdXRlZDoge30sCiAgd2F0Y2g6IHt9LAoKICBjcmVhdGVkKCkge30sCgogIG1vdW50ZWQoKSB7fSwKCiAgbWV0aG9kczogewogICAgYXN5bmMgb25Mb2FkKCkgewogICAgICB0cnkgewogICAgICAgIC8vIDEu6K+35rGC6I635Y+W5pWw5o2uCiAgICAgICAgY29uc3QgewogICAgICAgICAgZGF0YQogICAgICAgIH0gPSBhd2FpdCBnZXRBcnRpY2xlcyh7CiAgICAgICAgICBjaGFubmVsX2lkOiB0aGlzLmNoYW5uZWwuaWQsCiAgICAgICAgICAvLyDpopHpgZNJRAogICAgICAgICAgLy8gdGltZXN0YW1wIOivt+axguaVsOaNrueahOmhteeggQogICAgICAgICAgLy8g6K+35rGC56ys5LiA6aG155qE5pWw5o2u77yaIOW9k+WJjeacgOaWsOaXtumXtOaIsyBEYXRlLm5vdygpCiAgICAgICAgICAvLyDnlKjkuo7or7fmsYLkuYvlkI7mlbDmja7nmoTml7bpl7TmiLPvvIzkvJrlnKjlvZPliY3or7fmsYLnmoTnu5PmnpzkuK3ov5Tlm57nu5nkvaAKICAgICAgICAgIHRpbWVzdGFtcDogdGhpcy50aW1lc3RhbXAgfHwgRGF0ZS5ub3coKSwKICAgICAgICAgIHdpdGhfdG9wOiAxIC8vIOaYr+WQpuWMheWQq+e9rumhtu+8jOi/m+WFpemhtemdouesrOS4gOasoeivt+axguaXtuimgeWMheWQq+e9rumhtgoKICAgICAgICB9KTsKICAgICAgICAvKiAvLyDmqKHmi5/pmo/ljbPlpLHotKXnmoTmg4XlhrUNCiAgICAgICAgaWYoTWF0aC5yYW5kb20oKSA+IDAuNSkgew0KICAgICAgICAgIEpTT04ucGFyc2UoJ2Rlc25ham5kanNhJykNCiAgICAgICAgfSAqLwogICAgICAgIC8vIDIu5oqK6K+35rGC57uT5p6c5pWw5o2u5pS+5YiwIGxpc3Qg5pWw57uE5LitCgogICAgICAgIGNvbnN0IHsKICAgICAgICAgIHJlc3VsdHMKICAgICAgICB9ID0gZGF0YS5kYXRhOyAvLyAuLi7mlbDnu4TnmoTlsZXlvIDmk43kvZznrKbvvIzkvJrmiormlbDnu4TkuIDkuKrkuIDkuKrlsZXlvIAg5ou/5Ye65p2lLD1saXN0WzBdLGxpc3RbMV0KCiAgICAgICAgdGhpcy5saXN0LnB1c2goLi4ucmVzdWx0cyk7IC8vIDMu5pys5qyh5pWw5o2u5Yqg6L2957uT5p2f5LmL5ZCO77yM6KaB5oqK5Yqg6L2954q25oCB6K6+572u5Li657uT5p2fCgogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOyAvLyA0LuWIpOaWreaVsOaNruaYr+WQpuWFqOmDqOWKoOi9veWujOaIkAoKICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGgpIHsKICAgICAgICAgIC8vIOabtOaWsOiOt+WPluS4i+S4gOmhteaVsOaNrueahOaXtumXtOaIswogICAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBkYXRhLmRhdGEucHJlX3RpbWVzdGFtcDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8g5aaC5p6c5rKh5pyJ5pWw5o2u5LqG77yM5bCGZmluaXNoZWQ9dHJ1Ze+8jOS4jeWGjWxvYWTliqDovb3mm7TlpJoKICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgLy8g5bGV56S66ZSZ6K+v5o+Q56S654q25oCBCiAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7IC8vIOivt+axguWksei0pSBsb2FkaW5n5Lmf6ZyA6KaB5YWz6ZetCgogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICB9CiAgICB9LAoKICAgIC8vIOW9k+S4i+aLieWIt+aWsOeahCDml7blgJnkvJrop6blj5HosIPnlKjor6Xlh73mlbAKICAgIGFzeW5jIG9uUmVmcmVzaCgpIHsKICAgICAgdHJ5IHsKICAgICAgICAvLyAxLuivt+axguiOt+WPluaVsOaNrgogICAgICAgIGNvbnN0IHsKICAgICAgICAgIGRhdGEKICAgICAgICB9ID0gYXdhaXQgZ2V0QXJ0aWNsZXMoewogICAgICAgICAgY2hhbm5lbF9pZDogdGhpcy5jaGFubmVsLmlkLAogICAgICAgICAgLy8g6aKR6YGTSUQKICAgICAgICAgIC8vIHRpbWVzdGFtcCDor7fmsYLmlbDmja7nmoTpobXnoIEKICAgICAgICAgIC8vIOivt+axguW9k+WJjeacgOaWsOaXtumXtOaIsyBEYXRlLm5vdygpCiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgICB3aXRoX3RvcDogMSAvLyDmmK/lkKbljIXlkKvnva7pobbvvIzov5vlhaXpobXpnaLnrKzkuIDmrKHor7fmsYLml7bopoHljIXlkKvnva7pobYKCiAgICAgICAgfSk7CiAgICAgICAgLyogICAgIC8vIOaooeaLn+maj+WNs+Wksei0peeahOaDheWGtQ0KICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHsNCiAgICAgICAgICAgICAgSlNPTi5wYXJzZSgnZGVzbmFqbmRqc2EnKQ0KICAgICAgICAgICAgfSAqLwogICAgICAgIC8vIDIu5bCG5pWw5o2u6L+95Yqg5YiX6KGo55qE6aG26YOoCgogICAgICAgIGNvbnN0IHsKICAgICAgICAgIHJlc3VsdHMKICAgICAgICB9ID0gZGF0YS5kYXRhOwogICAgICAgIHRoaXMubGlzdC51bnNoaWZ0KC4uLnJlc3VsdHMpOyAvLyAzLuWFs+mXreS4i+aLieWIt+aWsOeahGxvYWRpbmfnirbmgIEKCiAgICAgICAgdGhpcy5pc1JlZnJlc2hMb2FkaW5nID0gZmFsc2U7IC8vIOabtOaWsOS4i+aLieWIt+aWsOaIkOWKn+aPkOekuuaWh+acrAoKICAgICAgICB0aGlzLnJlZnJlc2hTdWNjZXNzVGV4dCA9IGDliLfmlrDmiJDlip/vvIzmm7TmlrDkuoYke3Jlc3VsdHMubGVuZ3RofeadoeaVsOaNrmA7CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIHRoaXMuaXNSZWZyZXNoTG9hZGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMucmVmcmVzaFN1Y2Nlc3NUZXh0ID0gJ+WIt+aWsOWksei0pSc7CiAgICAgIH0KICAgIH0KICAgIC8qICAgICBvbkxvYWQgKCkgew0KICAgICAgICAgIC8vIOW8guatpeabtOaWsOaVsOaNrg0KICAgICAgICAgIC8vIDEu6K+35rGC6I635Y+W5pWw5o2uDQogICAgICAgICAgLy8gc2V0VGltZW91dCDku4XlgZrnpLrkvovvvIznnJ/lrp7lnLrmma/kuK3kuIDoiKzkuLogYWpheCDor7fmsYINCiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsNCiAgICAgICAgICAgIC8vIDIu5oqK6K+35rGC57uT5p6c5pWw5o2u5pS+5YiwIGxpc3Qg5pWw57uE5LitDQogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHsNCiAgICAgICAgICAgICAgdGhpcy5saXN0LnB1c2godGhpcy5saXN0Lmxlbmd0aCArIDEpDQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyAzLuacrOasoeaVsOaNruWKoOi9vee7k+adn+S5i+WQju+8jOimgeaKiuWKoOi9veeKtuaAgeiuvue9ruS4uue7k+adnw0KICAgICAgICAgICAgLy8gbG9hZGluZyDlhbPpl63ku6XlkI7miY3og73op6blj5HkuIvkuIDmrKHnmoTliqDovb3mm7TlpJoNCiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlDQogICAgICAgICAgICAvLyA0LuWIpOaWreaVsOaNruaYr+WQpuWFqOmDqOWKoOi9veWujOaIkA0KICAgICAgICAgICAgaWYgKHRoaXMubGlzdC5sZW5ndGggPj0gNDApIHsNCiAgICAgICAgICAgICAgLy8g5aaC5p6c5rKh5pyJ5pWw5o2u5LqG5oqKZmluaXNoZWTorr7nva7kuLp0cnVl77yM5LmL5ZCO5LiN5YaN6Kem5Y+R5Yqg6L295pu05aSaDQogICAgICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlDQogICAgICAgICAgICB9DQogICAgICAgICAgfSwgMTAwMCkNCiAgICAgICAgfSAqLwoKCiAgfQp9Ow=="},{"version":3,"sources":["article-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA,SAAA,WAAA,QAAA,eAAA;AACA,OAAA,WAAA,MAAA,2BAAA;AAEA,eAAA;AACA;AACA,EAAA,IAAA,EAAA,aAFA;AAGA,EAAA,UAAA,EAAA;AACA;AACA,IAAA;AAFA,GAHA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAPA;;AAaA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,EADA;AACA;AACA,MAAA,OAAA,EAAA,KAFA;AAEA;AACA,MAAA,QAAA,EAAA,KAHA;AAGA;AACA,MAAA,SAAA,EAAA,IAJA;AAIA;AACA,MAAA,KAAA,EAAA,KALA;AAKA;AACA,MAAA,gBAAA,EAAA,KANA;AAMA;AACA,MAAA,kBAAA,EAAA,EAPA,CAOA;;AAPA,KAAA;AASA,GAvBA;;AAwBA,EAAA,QAAA,EAAA,EAxBA;AAyBA,EAAA,KAAA,EAAA,EAzBA;;AA0BA,EAAA,OAAA,GAAA,CAAA,CA1BA;;AA2BA,EAAA,OAAA,GAAA,CAAA,CA3BA;;AA4BA,EAAA,OAAA,EAAA;AACA,UAAA,MAAA,GAAA;AACA,UAAA;AACA;AACA,cAAA;AAAA,UAAA;AAAA,YAAA,MAAA,WAAA,CAAA;AACA,UAAA,UAAA,EAAA,KAAA,OAAA,CAAA,EADA;AACA;AACA;AACA;AACA;AACA,UAAA,SAAA,EAAA,KAAA,SAAA,IAAA,IAAA,CAAA,GAAA,EALA;AAMA,UAAA,QAAA,EAAA,CANA,CAMA;;AANA,SAAA,CAAA;AAQA;AACA;AACA;AACA;AACA;;AACA,cAAA;AAAA,UAAA;AAAA,YAAA,IAAA,CAAA,IAAA,CAfA,CAgBA;;AACA,aAAA,IAAA,CAAA,IAAA,CAAA,GAAA,OAAA,EAjBA,CAmBA;;AACA,aAAA,OAAA,GAAA,KAAA,CApBA,CAqBA;;AACA,YAAA,OAAA,CAAA,MAAA,EAAA;AACA;AACA,eAAA,SAAA,GAAA,IAAA,CAAA,IAAA,CAAA,aAAA;AACA,SAHA,MAGA;AACA;AACA,eAAA,QAAA,GAAA,IAAA;AACA;AACA,OA7BA,CA6BA,OAAA,GAAA,EAAA;AACA;AACA,aAAA,KAAA,GAAA,IAAA,CAFA,CAGA;;AACA,aAAA,OAAA,GAAA,KAAA;AACA;AACA,KArCA;;AAsCA;AACA,UAAA,SAAA,GAAA;AACA,UAAA;AACA;AACA,cAAA;AAAA,UAAA;AAAA,YAAA,MAAA,WAAA,CAAA;AACA,UAAA,UAAA,EAAA,KAAA,OAAA,CAAA,EADA;AACA;AACA;AACA;AACA,UAAA,SAAA,EAAA,IAAA,CAAA,GAAA,EAJA;AAKA,UAAA,QAAA,EAAA,CALA,CAKA;;AALA,SAAA,CAAA;AAOA;AACA;AACA;AACA;AACA;;AACA,cAAA;AAAA,UAAA;AAAA,YAAA,IAAA,CAAA,IAAA;AACA,aAAA,IAAA,CAAA,OAAA,CAAA,GAAA,OAAA,EAfA,CAgBA;;AACA,aAAA,gBAAA,GAAA,KAAA,CAjBA,CAkBA;;AACA,aAAA,kBAAA,GAAA,WAAA,OAAA,CAAA,MAAA,KAAA;AACA,OApBA,CAoBA,OAAA,GAAA,EAAA;AACA,aAAA,gBAAA,GAAA,KAAA;AACA,aAAA,kBAAA,GAAA,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAnFA;AA5BA,CAAA","sourcesContent":["<template>\r\n  <div class=\"article-list\">\r\n    <van-pull-refresh\r\n      v-model=\"isRefreshLoading\"\r\n      :success-text=\"refreshSuccessText\"\r\n      :success-duration=\"1500\"\r\n      @refresh=\"onRefresh\"\r\n    >\r\n      <van-list\r\n        v-model=\"loading\"\r\n        :finished=\"finished\"\r\n        finished-text=\"没有更多了\"\r\n        :error.sync=\"error\"\r\n        error-text=\"请求失败，点击重新加载\"\r\n        @load=\"onLoad\"\r\n      >\r\n        <!-- 遍历文章列表项 -->\r\n        <article-item\r\n          v-for=\"(article, index) in list\"\r\n          :key=\"index\"\r\n          :article=\"article\"\r\n        />\r\n        <!-- <van-cell\r\n          v-for=\"(article, index) in list\"\r\n          :key=\"index\"\r\n          :title=\"article.title\"\r\n        /> -->\r\n      </van-list>\r\n    </van-pull-refresh>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 加载组件\r\nimport { getArticles } from '@/api/article'\r\nimport ArticleItem from '@/components/article-item'\r\n\r\nexport default {\r\n  // 注册组件\r\n  name: 'ArticleList',\r\n  components: {\r\n    // 注册\r\n    ArticleItem\r\n  },\r\n  props: {\r\n    channel: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      list: [], // list[] 存储列表数据的数组\r\n      loading: false, // 控制加载中 loading状态\r\n      finished: false, // 控制数据加载结束的状态，为true时，不再触发加载更多\r\n      timestamp: null, // 请求获取下一页数据的时间戳\r\n      error: false, // 列表加载失败的提示状态\r\n      isRefreshLoading: false, // 控制下拉刷新的loading状态\r\n      refreshSuccessText: '' // 下拉刷新成果提示文本\r\n    }\r\n  },\r\n  computed: {},\r\n  watch: {},\r\n  created () { },\r\n  mounted () { },\r\n  methods: {\r\n    async onLoad () {\r\n      try {\r\n        // 1.请求获取数据\r\n        const { data } = await getArticles({\r\n          channel_id: this.channel.id, // 频道ID\r\n          // timestamp 请求数据的页码\r\n          // 请求第一页的数据： 当前最新时间戳 Date.now()\r\n          // 用于请求之后数据的时间戳，会在当前请求的结果中返回给你\r\n          timestamp: this.timestamp || Date.now(),\r\n          with_top: 1 // 是否包含置顶，进入页面第一次请求时要包含置顶\r\n        })\r\n        /* // 模拟随即失败的情况\r\n        if(Math.random() > 0.5) {\r\n          JSON.parse('desnajndjsa')\r\n        } */\r\n        // 2.把请求结果数据放到 list 数组中\r\n        const { results } = data.data\r\n        // ...数组的展开操作符，会把数组一个一个展开 拿出来,=list[0],list[1]\r\n        this.list.push(...results)\r\n\r\n        // 3.本次数据加载结束之后，要把加载状态设置为结束\r\n        this.loading = false\r\n        // 4.判断数据是否全部加载完成\r\n        if (results.length) {\r\n          // 更新获取下一页数据的时间戳\r\n          this.timestamp = data.data.pre_timestamp\r\n        } else {\r\n          // 如果没有数据了，将finished=true，不再load加载更多\r\n          this.finished = true\r\n        }\r\n      } catch (err) {\r\n        // 展示错误提示状态\r\n        this.error = true\r\n        // 请求失败 loading也需要关闭\r\n        this.loading = false\r\n      }\r\n    },\r\n    // 当下拉刷新的 时候会触发调用该函数\r\n    async onRefresh () {\r\n      try {\r\n        // 1.请求获取数据\r\n        const { data } = await getArticles({\r\n          channel_id: this.channel.id, // 频道ID\r\n          // timestamp 请求数据的页码\r\n          // 请求当前最新时间戳 Date.now()\r\n          timestamp: Date.now(),\r\n          with_top: 1 // 是否包含置顶，进入页面第一次请求时要包含置顶\r\n        })\r\n        /*     // 模拟随即失败的情况\r\n            if (Math.random() > 0.5) {\r\n              JSON.parse('desnajndjsa')\r\n            } */\r\n        // 2.将数据追加列表的顶部\r\n        const { results } = data.data\r\n        this.list.unshift(...results)\r\n        // 3.关闭下拉刷新的loading状态\r\n        this.isRefreshLoading = false\r\n        // 更新下拉刷新成功提示文本\r\n        this.refreshSuccessText = `刷新成功，更新了${results.length}条数据`\r\n      } catch (err) {\r\n        this.isRefreshLoading = false\r\n        this.refreshSuccessText = '刷新失败'\r\n      }\r\n    }\r\n    /*     onLoad () {\r\n          // 异步更新数据\r\n          // 1.请求获取数据\r\n          // setTimeout 仅做示例，真实场景中一般为 ajax 请求\r\n          setTimeout(() => {\r\n            // 2.把请求结果数据放到 list 数组中\r\n            for (let i = 0; i < 10; i++) {\r\n              this.list.push(this.list.length + 1)\r\n            }\r\n            // 3.本次数据加载结束之后，要把加载状态设置为结束\r\n            // loading 关闭以后才能触发下一次的加载更多\r\n            this.loading = false\r\n            // 4.判断数据是否全部加载完成\r\n            if (this.list.length >= 40) {\r\n              // 如果没有数据了把finished设置为true，之后不再触发加载更多\r\n              this.finished = true\r\n            }\r\n          }, 1000)\r\n        } */\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.article-list {\r\n  // 记住列表的滚动位置\r\n  height: 79vh;\r\n  overflow-y: auto; // 没有的话列表就没办法滚动了\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views/home/components"}]}